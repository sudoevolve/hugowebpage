
[{"content":"1.1 C++ 简介\nC++ 是一门非常经典的高级编程语言。顾名思义，C++可以看做是C语言的增强版，在C的基础上扩展了更多的功能；最主要的扩展，就是面向对象和泛型编程。\n因此C++融合了多种不同的编程方式：以C语言为代表的面向过程编程；面向对象编程；以及模板化的泛型编程。\n可以说，C++一门“大而全”的编程语言，你可以用它实现想要的任何功能；与此同时，学习C++需要掌握的内容也会比较多。\n1.1.1 C和C++\n20世纪70年代，贝尔实验室的Dennis Ritchie为了开发UNIX操作系统，专门设计了一门结构化的高级语言，这就是大名鼎鼎的C语言。因为是为操作系统设计的语言，它本身是比较底层的，所以C具有低级语言的高运行效率、硬件访问能力，此外又融合了高级语言的通用性。\nC语言语法清晰，具有非常好的结构化编程的特性。于是C语言快速地统治了底层的系统级编程，并成为了之后几十年内经典的教学语言。\nC语言编程的整体思路是“过程式”的，也就是说，我们把想让计算机执行的操作按照步骤一步步定义好，然后用C语言写出来；所以我们写的代码，就是一个处理流程的描述。这种方式很容易理解，也可以非常方便地翻译成计算机能懂的机器语言；但是在面对大型项目、代码量非常大时，就会显得杂乱无章，代码的可读性就大大降低了。\n于是另一种编程方式应运而生，这就是面向对象编程。这种方式的主要思路是先构建“对象”，然后通过定义好的对象行为，实现我们想要的操作。\n贝尔实验室的 Bjarne Stroustrup（比雅尼·斯特劳斯特鲁普），在20世纪80年代创建了一个新的面向对象语言——C++。\n名字一目了然，它是基于C的，扩展了C的功能；所以C++是C语言的超集，所有C语言程序都可以在C++的环境下运行。而扩展的部分，主要就是引入了面向对象的特性，并实现了对C的泛型编程支持。\nC++的出现极大地扩充了C的应用场景，为C语言的长盛不衰提供了很大的助力。所以我们平常看招聘要求的技术栈描述，往往是把C/C++放在一起说的。\n1.1.2 C++ 的应用场景\nC++完全兼容C，具有C面向硬件的特性；此外还拥有面向对象和泛型编程的扩展。所以C++编写的程序运行效率高、功能强大，特别适合用在系统级应用场景上。所以我们经常可以看到，偏向底层、系统的开发，一般用的语言都是C++。\n底层硬件，系统编程：JVM的底层，Python解释器的底层，都离不开C/C++的身影；人工智能核心库的代码，也大多是C++写的\n嵌入式开发\n游戏开发\n当然，除了这些实际应用场景外，由于C/C++是经典的教学语言，因此计算机专业考研、考级、竞赛等场合往往也是把C++作为第一语言的。无论学习还是工作，C++都是一门非常有用的编程语言。\n1.2 C++ 标准\nC++作为一门高级编程语言，在不同的硬件平台上有着良好的可移植性。这意味着我们不需要改动代码，写出来的程序就可以在不同的平台“翻译”成机器能读懂的语言。要实现这个目标，就必须对C++编写的程序设定一些规范，这就是C++的标准。\nC++之父Stroustrup写过一本《C++编程语言》（The C++ Programming Language），里面有一个参考手册，专门介绍了这门语言的特性和用法。这其实就是最初的C++事实标准。\n不过真正意义上的标准，还需要专门的组织认证。ANSI（American National Standards Institute，美国国家标准局）在制定了C语言标准之后，在90年代专门设了一个委员会来制定C++的标准，并和ISO（国际标准化组织）一起创建了联合组织ANSI/ISO。1998年，第一个C++国际标准终于出炉了；这个标准在2003年又做了一次技术修订。因此我们一般所说的C++标准，第一版往往被叫做C++ 98/03。\n跟大多数语言一样，C++也在不停地发展更新。ISO在2011年批准了C++新标准，这可以认为是C++的2.0版本，一般被叫做C++ 11。C ++ 11新增了很多新特性，极大地扩展了C++的语言表达能力。此后在2014年和2017年，又出了两个新版本C++标准，一般叫做C++ 14和C++ 17，不过这两个版本增加的内容并不多；真正意义上的下一个大版本是2020年的C++ 20，它再一次给C++带来了大量的新特性。\n1.3 C++ 代码如何运行\n我们用C++写好的代码，其实就是符合特定语法规则的一些文字和符号。计算机是怎样识别出我们想要做的操作、并正确执行呢？\n这就需要一个专门的翻译程序，把我们写的源代码，翻译成计算机能理解的机器语言。这个翻译的过程就叫做“编译”，而这个“翻译官”就叫做编译器。所以C++是一门编译型的编程语言，这一点和C是一致的。\n事实上，C++代码的运行过程跟C程序代码也是一样的，大致可以分为下面几步：\n首先编写C++程序，保存到文件中，这就是我们的源代码；\n编译。用C++编译器将源代码编译成机器语言，得到的这个结果叫做目标代码；\n链接。C/C++程序一般都会用到库（library），这些库是已经实现好的目标代码，可以实现特定的功能（比如在屏幕上把信息打印显示出来）。这时我们就需要把之前编译好的目标代码，和所用到的库里的目标代码，组合成一个真正能运行的机器代码。这个过程叫做“链接”，得到的结果叫做可执行代码；\n运行。可执行代码就是可以直接运行的程序，运行它就可以执行我们想要的操作了。\n","date":"18 January 18180","externalUrl":null,"permalink":"/post/c++%E4%BB%8B%E7%BB%8D/","section":"Posts","summary":"1.1 C++ 简介","title":"C++ 简介","type":"post"},{"content":"","date":"18 January 18180","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"18 January 18180","externalUrl":null,"permalink":"/categories/cpp/","section":"Categories","summary":"","title":"Cpp","type":"categories"},{"content":"","date":"18 January 18180","externalUrl":null,"permalink":"/categories/docs/","section":"Categories","summary":"","title":"Docs","type":"categories"},{"content":"Welcome to [Evolve blog], a hub for software enthusiasts and coding learners of all levels. This blog is dedicated to sharing insights, tutorials, and resources about various software applications and programming techniques. Whether you\u0026rsquo;re a beginner looking to write your first lines of code or an experienced developer exploring new tools, you\u0026rsquo;ll find valuable content here to enhance your journey.\nJoin us as we delve into the exciting world of software and coding. Start exploring today, and let’s build something amazing together!\n","date":"18 January 18180","externalUrl":null,"permalink":"/","section":"Hello World","summary":"Welcome to [Evolve blog], a hub for software enthusiasts and coding learners of all levels.","title":"Hello World","type":"page"},{"content":"","date":"18 January 18180","externalUrl":null,"permalink":"/post/","section":"Posts","summary":"","title":"Posts","type":"post"},{"content":"","date":"18 January 18180","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"C++ 中，函数是用来执行特定任务的代码块。函数使程序能够通过将代码分成多个模块来提高可读性、可维护性和重用性。下面我将详细讲解 C++ 中函数的用法，包括函数的定义、声明、参数传递、返回值、重载和递归等内容。\n1. 函数的定义和声明 # 函数定义： # 函数定义是描述函数具体行为的地方，它包含了函数的返回类型、函数名、参数列表和函数体。\n语法：\n返回类型 函数名(参数列表) { // 函数体 // 返回一个符合返回类型的值（如果有返回类型） } 函数声明： # 函数声明也叫函数原型，它告诉编译器函数的返回类型、函数名和参数类型，但不包含函数体。函数声明通常放在程序的开头或者头文件中。\n语法：\n返回类型 函数名(参数类型1, 参数类型2, ...); 示例： # #include \u0026lt;iostream\u0026gt; using namespace std; // 函数声明（原型） int add(int, int); // 声明 add 函数，它接受两个整数并返回一个整数 int main() { int result = add(3, 4); // 调用 add 函数 cout \u0026lt;\u0026lt; \u0026#34;Sum: \u0026#34; \u0026lt;\u0026lt; result \u0026lt;\u0026lt; endl; // 输出结果 return 0; } // 函数定义 int add(int a, int b) { return a + b; // 返回 a 和 b 的和 } 2. 函数的返回值 # 函数可以通过 return 语句返回一个值。返回值的类型与函数的返回类型必须匹配。\n示例： # double multiply(double a, double b) { return a * b; // 返回 a 和 b 的乘积 } 如果函数的返回类型为 void，则函数不返回任何值，直接使用 return; 退出。\n示例： # void printMessage() { cout \u0026lt;\u0026lt; \u0026#34;This is a message!\u0026#34; \u0026lt;\u0026lt; endl; } 3. 参数传递 # 函数可以通过 参数传递来获取外部数据。C++ 提供了三种常见的参数传递方式：值传递、引用传递、指针传递。\n(1) 值传递： # 值传递是将实参的值传递给函数，函数内部的参数是局部变量，改变它不会影响到实参。\n示例： # void increase(int x) { x = x + 1; // 修改局部变量 cout \u0026lt;\u0026lt; \u0026#34;Inside function: \u0026#34; \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl; } int main() { int a = 5; increase(a); // 传递值给函数 cout \u0026lt;\u0026lt; \u0026#34;Outside function: \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl; // a 的值没有改变 return 0; } 输出：\nInside function: 6 Outside function: 5 (2) 引用传递： # 引用传递是将变量的内存地址传递给函数，函数操作的是实参的值，因此实参的值会被修改。\n示例： # void increase(int\u0026amp; x) { x = x + 1; // 修改实参 cout \u0026lt;\u0026lt; \u0026#34;Inside function: \u0026#34; \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl; } int main() { int a = 5; increase(a); // 传递变量的引用 cout \u0026lt;\u0026lt; \u0026#34;Outside function: \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl; // a 的值被修改 return 0; } 输出：\nInside function: 6 Outside function: 6 (3) 指针传递： # 指针传递是将变量的内存地址传递给函数，类似于引用传递，但需要通过指针来操作数据。\n示例： # void increase(int* x) { *x = *x + 1; // 修改指针指向的值 cout \u0026lt;\u0026lt; \u0026#34;Inside function: \u0026#34; \u0026lt;\u0026lt; *x \u0026lt;\u0026lt; endl; } int main() { int a = 5; increase(\u0026amp;a); // 传递变量的地址 cout \u0026lt;\u0026lt; \u0026#34;Outside function: \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl; // a 的值被修改 return 0; } 输出：\nInside function: 6 Outside function: 6 4. 函数重载 # 函数重载是指在同一个作用域内，函数名称相同，但参数列表不同的情况。编译器通过函数的参数数量或类型来区分重载的函数。\n示例： # #include \u0026lt;iostream\u0026gt; using namespace std; int add(int a, int b) { return a + b; } double add(double a, double b) { return a + b; } int main() { cout \u0026lt;\u0026lt; \u0026#34;Integer addition: \u0026#34; \u0026lt;\u0026lt; add(3, 4) \u0026lt;\u0026lt; endl; // 调用 add(int, int) cout \u0026lt;\u0026lt; \u0026#34;Double addition: \u0026#34; \u0026lt;\u0026lt; add(3.5, 4.5) \u0026lt;\u0026lt; endl; // 调用 add(double, double) return 0; } 5. 递归函数 # 递归函数是指一个函数在其定义中直接或间接地调用自身。递归通常用于分解复杂问题为更小的子问题，如二分查找、树的遍历等。\n示例： # #include \u0026lt;iostream\u0026gt; using namespace std; int factorial(int n) { if (n == 0) { return 1; // 基本条件 } else { return n * factorial(n - 1); // 递归调用 } } int main() { int num = 5; cout \u0026lt;\u0026lt; \u0026#34;Factorial of \u0026#34; \u0026lt;\u0026lt; num \u0026lt;\u0026lt; \u0026#34; is \u0026#34; \u0026lt;\u0026lt; factorial(num) \u0026lt;\u0026lt; endl; return 0; } 输出：\nFactorial of 5 is 120 6. 内联函数 (Inline Function) # 内联函数是通过 inline 关键字定义的函数，它指示编译器在调用处直接插入函数的代码，而不是通过正常的函数调用过程。适用于函数体很小且被频繁调用的情况。\n示例： # inline int square(int x) { return x * x; } int main() { cout \u0026lt;\u0026lt; \u0026#34;Square of 5 is \u0026#34; \u0026lt;\u0026lt; square(5) \u0026lt;\u0026lt; endl; return 0; } 7. 函数指针 # 函数指针是指向函数的指针。通过函数指针，可以在运行时动态选择调用不同的函数。函数指针通常用于回调机制、事件驱动编程等。\n示例： # #include \u0026lt;iostream\u0026gt; using namespace std; // 定义一个函数指针类型 typedef int (*Operation)(int, int); // 定义加法函数 int add(int a, int b) { return a + b; } // 定义减法函数 int subtract(int a, int b) { return a - b; } int main() { // 使用函数指针 Operation op = add; // 将 add 函数赋值给函数指针 cout \u0026lt;\u0026lt; \u0026#34;Add: \u0026#34; \u0026lt;\u0026lt; op(5, 3) \u0026lt;\u0026lt; endl; op = subtract; // 将 subtract 函数赋值给函数指针 cout \u0026lt;\u0026lt; \u0026#34;Subtract: \u0026#34; \u0026lt;\u0026lt; op(5, 3) \u0026lt;\u0026lt; endl; return 0; } 8. 默认参数 # 函数可以为参数指定默认值，这样在调用函数时，如果没有提供某个参数的值，就会使用默认值。\n示例： # void greet(string name = \u0026#34;Guest\u0026#34;) { cout \u0026lt;\u0026lt; \u0026#34;Hello, \u0026#34; \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34;!\u0026#34; \u0026lt;\u0026lt; endl; } int main() { greet(); // 使用默认值 greet(\u0026#34;Alice\u0026#34;); // 使用提供的参数值 return 0; } 总结 # C++ 中函数的用法包括：\n函数定义与声明：了解如何定义和声明函数。 返回值：通过 return 返回值，可以定义有返回值或没有返回值的函数。 参数传递：了解值传递、引用传递和指针传递的区别。 函数重载：同名函数可以根据参数类型和数量的不同进行重载。 递归函数：函数调用自身处理复杂问题。 内联函数：使用 inline 关键字避免函数调用的开销。 函数指针：指向函数的指针可以动态调用不同的函数。 默认参数：为函数参数提供默认值，简化函数调用。 ","date":"18 January 18180","externalUrl":null,"permalink":"/post/%E5%87%BD%E6%95%B0/","section":"Posts","summary":"C++ 中，函数是用来执行特定任务的代码块。函数使程序能够通过将代码分成多个模块来提高可读性、可维护性和重用性。下面我将详细讲解 C++ 中函数的用法，包括函数的定义、声明、参数传递、返回值、重载和递归等内容。","title":"函数","type":"post"},{"content":"C++ 基本语法涵盖了语言的基础结构，包括变量声明、控制语句、函数、类和对象等。下面我将从几个重要的方面讲解 C++ 基本语法。\n1. 基本结构 # C++ 程序的基本结构包括：\n头文件包含：使用 #include 引入标准库或用户自定义的头文件。 命名空间：通过 using namespace 可以避免频繁使用 std:: 前缀。 主函数 main()：每个 C++ 程序必须包含一个 main() 函数，它是程序执行的入口。 #include \u0026lt;iostream\u0026gt; // 引入头文件 using namespace std; // 使用标准命名空间 int main() { cout \u0026lt;\u0026lt; \u0026#34;Hello, World!\u0026#34; \u0026lt;\u0026lt; endl; // 输出文本 return 0; // 返回 0，表示程序正常结束 } 2. 变量声明与数据类型 # C++ 支持多种数据类型，变量必须在使用前声明。常见的基本数据类型包括：\nint：整数类型 float：单精度浮点型 double：双精度浮点型 char：字符类型 bool：布尔类型 string：字符串类型（需要引入 #include \u0026lt;string\u0026gt;） 示例： # int a = 10; // 整数类型 float b = 3.14f; // 单精度浮点类型 double c = 3.141592653; // 双精度浮点类型 char d = \u0026#39;A\u0026#39;; // 字符类型 bool flag = true; // 布尔类型 string name = \u0026#34;C++\u0026#34;; // 字符串类型 3. 运算符 # C++ 支持多种运算符，包括：\n算术运算符：+、-、*、/、% 关系运算符：==、!=、\u0026gt;、\u0026lt;、\u0026gt;=、\u0026lt;= 逻辑运算符：\u0026amp;\u0026amp;、||、! 位运算符：\u0026amp;、|、^、~、\u0026lt;\u0026lt;、\u0026gt;\u0026gt; 赋值运算符：=、+=、-=、*=、/=、%= 自增自减运算符：++、-- 条件运算符：? : 指针运算符：*（解引用）、\u0026amp;（取地址） 示例： # int x = 5, y = 3; cout \u0026lt;\u0026lt; (x + y) \u0026lt;\u0026lt; endl; // 输出 8 cout \u0026lt;\u0026lt; (x \u0026gt; y) \u0026lt;\u0026lt; endl; // 输出 1（true） 4. 流程控制语句 # C++ 支持标准的流程控制语句：\n条件语句： # if、else if、else switch、case、default 循环语句： # for 循环 while 循环 do-while 循环 跳转语句： # break：跳出循环或 switch 语句 continue：跳过当前循环的剩余部分，进入下一次循环 return：从函数中返回 示例： # // if 语句 if (x \u0026gt; y) { cout \u0026lt;\u0026lt; \u0026#34;x 大于 y\u0026#34; \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; \u0026#34;x 小于或等于 y\u0026#34; \u0026lt;\u0026lt; endl; } // for 循环 for (int i = 0; i \u0026lt; 5; i++) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } // while 循环 while (x \u0026gt; 0) { cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; x--; } // do-while 循环 do { cout \u0026lt;\u0026lt; \u0026#34;至少执行一次\u0026#34;; } while (false); 5. 函数 # C++ 支持定义函数。函数的声明格式如下：\n返回类型 函数名(参数类型 参数1, 参数类型 参数2, ...) { // 函数体 return 返回值; // 根据返回类型返回值 } 示例： # int add(int a, int b) { return a + b; } int main() { int sum = add(3, 4); // 调用 add 函数 cout \u0026lt;\u0026lt; \u0026#34;Sum: \u0026#34; \u0026lt;\u0026lt; sum \u0026lt;\u0026lt; endl; return 0; } 6. 数组 # C++ 中的数组是固定大小的序列，存储多个相同类型的元素。\n示例： # int arr[5] = {1, 2, 3, 4, 5}; // 定义一个包含5个整数的数组 for (int i = 0; i \u0026lt; 5; i++) { cout \u0026lt;\u0026lt; arr[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } 7. 指针与引用 # 指针是存储内存地址的变量。通过指针，可以间接访问变量。引用是变量的别名。\n指针： # int a = 10; int* ptr = \u0026amp;a; // ptr 存储 a 的地址 cout \u0026lt;\u0026lt; *ptr \u0026lt;\u0026lt; endl; // 输出 a 的值，通过解引用操作符 * 引用： # int a = 10; int\u0026amp; ref = a; // ref 是 a 的引用 cout \u0026lt;\u0026lt; ref \u0026lt;\u0026lt; endl; // 输出 a 的值 8. 类与对象 # C++ 是面向对象的语言，类是对象的模板。一个类可以包含数据成员（变量）和成员函数（方法）。\n示例： # class Person { public: string name; int age; void greet() { cout \u0026lt;\u0026lt; \u0026#34;Hello, my name is \u0026#34; \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; and I am \u0026#34; \u0026lt;\u0026lt; age \u0026lt;\u0026lt; \u0026#34; years old.\u0026#34; \u0026lt;\u0026lt; endl; } }; int main() { Person p; p.name = \u0026#34;Alice\u0026#34;; p.age = 25; p.greet(); // 输出: Hello, my name is Alice and I am 25 years old. return 0; } 9. 输入输出（I/O） # C++ 提供了标准输入输出流库 \u0026lt;iostream\u0026gt; 来处理输入输出。\n输出：使用 cout 进行输出。 输入：使用 cin 进行输入。 示例： # int num; cout \u0026lt;\u0026lt; \u0026#34;请输入一个数字: \u0026#34;; cin \u0026gt;\u0026gt; num; // 从控制台读取一个整数 cout \u0026lt;\u0026lt; \u0026#34;你输入的数字是: \u0026#34; \u0026lt;\u0026lt; num \u0026lt;\u0026lt; endl; 总结 # C++ 的基本语法包括：\n变量声明与数据类型 运算符 控制流语句（如 if、for、while 等） 函数的定义与调用 数组、指针和引用的使用 类与对象的面向对象编程 ","date":"18 January 18180","externalUrl":null,"permalink":"/post/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","section":"Posts","summary":"C++ 基本语法涵盖了语言的基础结构，包括变量声明、控制语句、函数、类和对象等。下面我将从几个重要的方面讲解 C++ 基本语法。","title":"基本语法","type":"post"},{"content":" 1. 指针基础 # 定义指针 # 指针是存储地址的变量。它保存的是另一个变量的内存地址，而不是变量的值。\nint x = 10; // x 是一个整型变量 int* ptr = \u0026amp;x; // ptr 是一个指向整型变量 x 的指针，保存了 x 的内存地址 指针声明与初始化 # 指针声明的基本语法是：\ntype* pointerName; type 表示指针指向的变量类型。 pointerName 是指针变量的名称。 初始化指针： 指针可以通过获取变量的地址来初始化，地址使用取地址符 \u0026amp;。\nint num = 5; int* ptr = \u0026amp;num; // ptr 指向 num 变量的内存地址 解引用 # 解引用符 * 用于访问指针所指向的变量的值。\nstd::cout \u0026lt;\u0026lt; *ptr; // 输出 num 的值，即 5 2. 指针与数组 # 在C++中，数组的名字本质上就是指向数组第一个元素的指针。你可以通过指针来操作数组元素。\n指针访问数组 # int arr[] = {1, 2, 3, 4, 5}; int* ptr = arr; // ptr 指向数组的第一个元素 std::cout \u0026lt;\u0026lt; *ptr; // 输出 1 std::cout \u0026lt;\u0026lt; *(ptr + 1); // 输出 2 数组指针与指针数组 # 数组指针：指向数组的指针，类型是 type (*)[size]，例如 int (*arrPtr)[5]。 指针数组：数组中的每个元素都是指针，例如 int* arr[5]。 示例： # int arr[5] = {10, 20, 30, 40, 50}; int* arrPtr[5]; // 声明指针数组 for (int i = 0; i \u0026lt; 5; ++i) { arrPtr[i] = \u0026amp;arr[i]; // 数组元素是指向 arr 中每个元素的指针 std::cout \u0026lt;\u0026lt; *arrPtr[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 输出 10 20 30 40 50 } 3. 指针与结构体 # 指针不仅可以指向基本类型的变量，还可以指向结构体或类。指向结构体的指针可以用来访问结构体成员。\n示例： # struct Person { std::string name; int age; }; Person p1 = {\u0026#34;Alice\u0026#34;, 30}; Person* ptr = \u0026amp;p1; // ptr 指向结构体 p1 的地址 std::cout \u0026lt;\u0026lt; ptr-\u0026gt;name; // 输出 \u0026#34;Alice\u0026#34; std::cout \u0026lt;\u0026lt; ptr-\u0026gt;age; // 输出 30 结构体指针的成员访问：通过指针访问结构体的成员时，使用 -\u0026gt; 操作符，而不是 . 操作符。 4. 动态内存分配 # C++ 提供了 new 和 delete 操作符来进行动态内存管理。new 用于分配内存，delete 用于释放内存。\n使用 new 动态分配内存 # int* ptr = new int; // 分配一个 int 类型的内存 *ptr = 10; // 给分配的内存赋值 std::cout \u0026lt;\u0026lt; *ptr; // 输出 10 释放内存 # delete ptr; // 释放动态分配的内存 注意：使用 new 动态分配内存后，一定要用 delete 释放，否则会导致内存泄漏。 数组的动态内存分配 # int* arr = new int[5]; // 动态分配一个包含 5 个 int 元素的数组 arr[0] = 1; arr[1] = 2; std::cout \u0026lt;\u0026lt; arr[0]; // 输出 1 delete[] arr; // 释放动态分配的数组 5. 指向指针的指针 # 指针可以指向另一个指针，这样的指针称为指向指针的指针（pointer to pointer）。\nint x = 10; int* ptr1 = \u0026amp;x; // ptr1 指向 x 的地址 int** ptr2 = \u0026amp;ptr1; // ptr2 指向 ptr1 的地址 std::cout \u0026lt;\u0026lt; **ptr2; // 输出 10 多级指针的使用 # 可以使用多个 * 访问多级指针所指向的值，每增加一层 * 就表示向前解引用一步。\n6. 函数指针 # 函数指针是指向函数的指针，可以用来间接调用函数。\n定义和使用函数指针 # #include \u0026lt;iostream\u0026gt; using namespace std; // 定义一个函数 void printMessage() { cout \u0026lt;\u0026lt; \u0026#34;Hello, World!\u0026#34; \u0026lt;\u0026lt; endl; } int main() { // 声明一个函数指针 void (*funcPtr)() = \u0026amp;printMessage; // 使用函数指针调用函数 funcPtr(); // 输出 \u0026#34;Hello, World!\u0026#34; } 函数指针的声明：返回类型 (*函数指针名)(参数类型)。 调用函数：通过函数指针 funcPtr() 来调用对应的函数。 7. 常见错误与指针管理 # 空指针解引用 # 空指针（nullptr）解引用会导致程序崩溃。\nint* ptr = nullptr; std::cout \u0026lt;\u0026lt; *ptr; // 错误：空指针解引用 野指针 # 指针指向的内存已经被释放，但指针仍然存在，这种指针称为野指针，会导致程序不稳定。\nint* ptr = new int(10); delete ptr; // 释放内存 std::cout \u0026lt;\u0026lt; *ptr; // 错误：访问已删除的内存 指针越界 # 访问指针指向的数组或内存超出有效范围会导致错误。\nint arr[5] = {1, 2, 3, 4, 5}; int* ptr = arr; std::cout \u0026lt;\u0026lt; *(ptr + 10); // 错误：越界访问 8. 指针与常量 # 指针与常量结合的几种情况：\n常量指针：指针的值（即内存地址）不可改变，但可以通过它改变所指向的内容。\nint x = 10; int* const ptr = \u0026amp;x; // 常量指针 *ptr = 20; // 可以修改所指向的值 // ptr = \u0026amp;y; // 错误：不能修改指针本身 指向常量的指针：指针所指向的值不能修改，但指针本身可以修改。\nconst int x = 10; const int* ptr = \u0026amp;x; // 指向常量的指针 // *ptr = 20; // 错误：不能修改指向的值 ptr = \u0026amp;y; // 可以修改指针 常量指针指向常量：既不能修改指针本身，也不能修改指针指向的值。\nconst int x = 10; const int* const ptr = \u0026amp;x; // 常量指针指向常量 案例： # 案例一：交换两个整数的值（使用指针） # 问题描述： # 你需要编写一个函数，用指针交换两个整数的值。\n分析： # 指针可以通过传递变量的地址来实现修改原变量的值。因此，可以传递指向整数的指针，在函数内部修改这些指针所指向的值。\n代码实现： # #include \u0026lt;iostream\u0026gt; using namespace std; // 交换函数 void swap(int* a, int* b) { int temp = *a; // 通过解引用获取 a 指向的值 *a = *b; // 修改 a 指向的值 *b = temp; // 修改 b 指向的值 } int main() { int x = 5; int y = 10; cout \u0026lt;\u0026lt; \u0026#34;交换前: x = \u0026#34; \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34;, y = \u0026#34; \u0026lt;\u0026lt; y \u0026lt;\u0026lt; endl; // 传递指针到交换函数 swap(\u0026amp;x, \u0026amp;y); cout \u0026lt;\u0026lt; \u0026#34;交换后: x = \u0026#34; \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34;, y = \u0026#34; \u0026lt;\u0026lt; y \u0026lt;\u0026lt; endl; return 0; } 解释： # swap函数：函数 swap 接受两个指针 a 和 b，并通过解引用操作符 * 获取指针所指向的值，然后交换这两个值。\n传递指针：在 main 函数中，我们通过传递 \u0026amp;x 和 \u0026amp;y（即 x 和 y 的地址）来实现对这两个变量值的交换。\n输出结果：\n交换前: x = 5, y = 10 交换后: x = 10, y = 5 这个案例展示了如何通过指针在函数内部修改变量的值，从而达到交换两个变量的目的。\n案例二：动态数组的内存管理（使用指针） # 问题描述： # 创建一个动态数组，并使用指针管理数组的内存。实现一个函数，能够动态地为数组分配内存，初始化数组内容，然后释放内存。\n分析： # 我们可以使用 new 来动态分配内存，使用指针来操作这些动态分配的内存。动态内存分配的优势是能够在运行时决定数组的大小，且不受编译时固定大小的限制。\n代码实现： # #include \u0026lt;iostream\u0026gt; using namespace std; void createAndDisplayArray(int size) { // 使用 new 动态分配内存 int* arr = new int[size]; // 初始化数组内容 for (int i = 0; i \u0026lt; size; ++i) { arr[i] = i + 1; } // 显示数组内容 for (int i = 0; i \u0026lt; size; ++i) { cout \u0026lt;\u0026lt; arr[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } cout \u0026lt;\u0026lt; endl; // 使用 delete 释放内存 delete[] arr; } int main() { int size; cout \u0026lt;\u0026lt; \u0026#34;请输入数组大小：\u0026#34;; cin \u0026gt;\u0026gt; size; // 调用函数，传递数组大小 createAndDisplayArray(size); return 0; } 解释： # 动态内存分配：int* arr = new int[size]; 使用 new 动态分配一个大小为 size 的整型数组。 初始化与访问数组：通过指针 arr 来访问数组元素，例如 arr[i] = i + 1;。 释放内存：当不再需要数组时，使用 delete[] arr; 释放动态分配的内存，避免内存泄漏。 输出结果： # 假设输入数组大小为 5，输出会是：\n请输入数组大小：5 1 2 3 4 5 关键点： # 动态数组的大小可以在运行时确定，这是与静态数组（编译时确定大小）不同的地方。 使用 new 和 delete 动态分配和释放内存，避免内存泄漏。 ","date":"18 January 18180","externalUrl":null,"permalink":"/post/%E6%8C%87%E9%92%88/","section":"Posts","summary":"1.","title":"指针","type":"post"},{"content":"在 C++ 中，变量和数据类型是基础概念，用来存储程序中的数据。理解这些概念是学习 C++ 编程的第一步。\n1. 变量概述 # 变量是内存中用来存储数据的命名位置。每个变量都有：\n类型：决定了存储数据的类型和大小。 名称：用于在代码中引用该变量。 值：变量的当前内容。 在 C++ 中，所有变量在使用之前必须先声明。\n1.1 变量声明 # int age; // 声明一个整型变量 age float weight; // 声明一个浮动型变量 weight 语法：\u0026lt;数据类型\u0026gt; \u0026lt;变量名\u0026gt;;\n初始化变量：可以在声明时给变量一个初值：\nint age = 25; // 声明并初始化变量 2. 数据类型概述 # 数据类型定义了变量能够存储的值的类型，并决定了变量占用的内存大小。\nC++ 中有两大类数据类型：\n基本数据类型：如整型、浮动型、字符型等。 用户定义的数据类型：如类、结构体、枚举、联合等。 2.1 基本数据类型 # 整型（int） # int：表示整数。它可以存储正整数、负整数和零。\n常见大小：\nint：通常占用 4 字节（在大多数系统上）。 示例：\nint age = 30; // 整数类型变量 浮动型（float、double） # float：表示单精度浮点数，通常占用 4 字节。\ndouble：表示双精度浮点数，通常占用 8 字节，精度比 float 高。\n示例：\nfloat height = 5.9f; // 单精度浮动型 double weight = 60.75; // 双精度浮动型 字符型（char） # char：表示一个字符，通常占用 1 字节。char 用来存储单个字符，例如字母或符号。\n还可以表示小范围的整数（ASCII 值）。\n示例：\nchar grade = \u0026#39;A\u0026#39;; // 字符类型 布尔型（bool） # bool：表示布尔值，通常只有两种取值：true（真）和 false（假）。\n示例：\nbool isActive = true; // 布尔类型 2.2 修饰符 # C++ 支持一些修饰符来扩展基本数据类型的功能，主要有：\nsigned、unsigned：控制整数是否可以表示负数。 short、long：控制整数的大小。 例如：\nunsigned int num = 42; // 无符号整型，表示非负数 long int bigNum = 1234567890; // 长整型 short int smallNum = 1000; // 短整型 2.3 数据类型的大小 # 不同的数据类型在不同平台上的大小可能有所不同，但在大多数平台上通常为：\nint：4 字节（32 位） float：4 字节（32 位） double：8 字节（64 位） char：1 字节（8 位） 可以使用 sizeof 运算符来查看数据类型的大小：\ncout \u0026lt;\u0026lt; sizeof(int) \u0026lt;\u0026lt; endl; // 输出 int 类型的大小 cout \u0026lt;\u0026lt; sizeof(double) \u0026lt;\u0026lt; endl; // 输出 double 类型的大小 2.4 常量类型 # const：用于声明常量，常量的值在程序运行时不能改变。\nconst int MAX_AGE = 100; // MAX_AGE 是常量，不能修改 常量可以是任何数据类型。\n2.5 字符串类型 # C++ 中并没有原生的字符串类型，但可以通过字符数组或 std::string 类型来表示字符串。\n字符数组：\nchar name[20] = \u0026#34;Alice\u0026#34;; // 用字符数组表示字符串 std::string（标准库中的字符串类）：\nstring name = \u0026#34;Alice\u0026#34;; // 使用 string 类型表示字符串 3. 类型转换 # C++ 提供了几种类型转换的方法，包括：\n隐式转换（自动类型转换）：C++ 会自动进行类型转换（例如，将 int 转换为 double）。 显式转换（强制类型转换）：通过 static_cast、reinterpret_cast 等进行类型转换。 int x = 10; double y = x; // 隐式转换，x 自动转换为 double 类型 double pi = 3.14159; int intPi = static_cast\u0026lt;int\u0026gt;(pi); // 强制转换，pi 被转换为整数部分 4. 变量的作用域 # 局部变量：在函数或块内声明的变量，只能在该函数或块内使用。\nvoid foo() { int x = 10; // x 是局部变量，只在 foo 函数内有效 cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl; } 全局变量：在函数外部声明的变量，整个程序中都可以访问（如果没有局部变量遮蔽它的话）。\nint x = 10; // 全局变量 void foo() { cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl; // 访问全局变量 } 5. 常见的复合数据类型 # C++ 中的 复合数据类型 是由多个基本数据类型（如整数、字符、浮点数等）组合而成的数据结构。常见的复合数据类型包括 数组（Array）、结构体（Struct）、共用体（Union）、枚举（Enum） 和 类（Class）。\n下面我将详细介绍这些复合数据类型及其使用方式。\n1. 数组（Array） # 数组是存储多个相同类型元素的集合，可以通过索引访问这些元素。\n数组的定义和使用： # #include \u0026lt;iostream\u0026gt; using namespace std; int main() { int arr[5] = {1, 2, 3, 4, 5}; // 定义一个包含 5 个整数的数组 // 访问和输出数组元素 for (int i = 0; i \u0026lt; 5; i++) { cout \u0026lt;\u0026lt; \u0026#34;arr[\u0026#34; \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34;] = \u0026#34; \u0026lt;\u0026lt; arr[i] \u0026lt;\u0026lt; endl; } return 0; } 数组特点： # 类型一致：数组中的所有元素类型相同。 索引：数组的索引从 0 开始，最大索引为 size - 1，其中 size 是数组的大小。 大小固定：一旦定义了数组的大小，大小不能动态改变。 多维数组： # C++ 还支持多维数组，例如二维数组：\nint arr[3][4] = { {1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12} }; 2. 结构体（Struct） # 结构体是 C++ 中用来定义自定义数据类型的一种方式，可以将不同类型的数据组合在一起。\n结构体的定义和使用： # #include \u0026lt;iostream\u0026gt; using namespace std; // 定义一个结构体类型 struct Person { string name; int age; }; int main() { Person person1 = {\u0026#34;Alice\u0026#34;, 30}; // 创建结构体实例并初始化 // 访问结构体成员 cout \u0026lt;\u0026lt; \u0026#34;Name: \u0026#34; \u0026lt;\u0026lt; person1.name \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;Age: \u0026#34; \u0026lt;\u0026lt; person1.age \u0026lt;\u0026lt; endl; return 0; } 结构体特点： # 不同类型：结构体成员可以是不同类型的数据（如整数、字符串、浮点数等）。 成员访问：通过 . 操作符访问结构体的成员。 结构体与类的区别： # 结构体的成员默认是 public，而类的成员默认是 private。 否则，结构体和类的功能几乎是一样的。 3. 共用体（Union） # 共用体是一种特殊的复合数据类型，它的所有成员共用同一块内存空间。这意味着在同一时刻，只有一个成员可以存储数据。\n共用体的定义和使用： # #include \u0026lt;iostream\u0026gt; using namespace std; // 定义一个共用体类型 union Data { int i; float f; char c; }; int main() { Data data; // 创建共用体实例 data.i = 10; cout \u0026lt;\u0026lt; \u0026#34;Integer: \u0026#34; \u0026lt;\u0026lt; data.i \u0026lt;\u0026lt; endl; data.f = 3.14; cout \u0026lt;\u0026lt; \u0026#34;Float: \u0026#34; \u0026lt;\u0026lt; data.f \u0026lt;\u0026lt; endl; data.c = \u0026#39;A\u0026#39;; cout \u0026lt;\u0026lt; \u0026#34;Char: \u0026#34; \u0026lt;\u0026lt; data.c \u0026lt;\u0026lt; endl; // 注意，只有最后赋值的数据会有效，其他数据会被覆盖 return 0; } 共用体特点： # 共用内存：所有成员共享同一内存位置，因此只能存储一个值。 节省内存：当你需要存储不同类型的数据，但每次只需要一个类型时，共用体能节省内存。 4. 枚举（Enum） # 枚举是一种数据类型，它由一组命名的整型常量组成。可以通过枚举来定义一组相关的常量值。\n枚举的定义和使用： # #include \u0026lt;iostream\u0026gt; using namespace std; // 定义一个枚举类型 enum Day { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday }; int main() { Day today = Wednesday; // 使用枚举值 // 输出枚举值对应的整数值 cout \u0026lt;\u0026lt; \u0026#34;Today is: \u0026#34; \u0026lt;\u0026lt; today \u0026lt;\u0026lt; endl; // 输出：Today is: 3 (Wednesday) return 0; } 枚举特点： # 默认值：枚举值从 0 开始递增，除非显式指定其他值。 强类型：C++11 以后，enum class 提供了强类型枚举，可以避免隐式转换问题。 强类型枚举： # enum class Color { Red, Green, Blue }; Color color = Color::Red; 5. 类（Class） # 类是 C++ 中的核心概念之一，用于定义对象的模板，类可以包含数据成员（变量）和成员函数（方法）。\n类的定义和使用： # #include \u0026lt;iostream\u0026gt; using namespace std; // 定义一个类 class Person { public: string name; int age; // 构造函数 Person(string n, int a) : name(n), age(a) {} // 成员函数 void introduce() { cout \u0026lt;\u0026lt; \u0026#34;Hi, my name is \u0026#34; \u0026lt;\u0026lt; name \u0026lt;\u0026lt; \u0026#34; and I am \u0026#34; \u0026lt;\u0026lt; age \u0026lt;\u0026lt; \u0026#34; years old.\u0026#34; \u0026lt;\u0026lt; endl; } }; int main() { // 创建类的对象 Person person1(\u0026#34;Alice\u0026#34;, 30); // 调用成员函数 person1.introduce(); return 0; } 类特点： # 封装：类将数据和操作数据的函数封装在一起，提供了对数据的控制。 继承：类支持继承，使得可以创建子类，继承父类的属性和行为。 多态：通过虚函数支持多态，即可以在派生类中重写基类的函数。 总结： # 数组：固定大小，元素类型相同的集合。 结构体：存储不同类型数据的集合，每个成员可以是不同类型。 共用体：所有成员共用同一块内存，节省内存。 枚举：一组命名的常量，通常用来表示状态或选项。 类：定义对象，支持封装、继承和多态，是面向对象编程的核心。 通过理解这些复合数据类型，你可以更高效地组织和管理程序中的数据。\n6. 总结 # C++ 中有多种基本数据类型，包括整数类型、浮点类型、字符类型、布尔类型等。 使用修饰符可以控制数据类型的大小、符号和精度。 const 可以声明常量，std::string 可以用于表示字符串。 C++ 支持类型转换，可以通过隐式或显式转换来处理不同的数据类型。 ","date":"18 January 18180","externalUrl":null,"permalink":"/post/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F/","section":"Posts","summary":"在 C++ 中，变量和数据类型是基础概念，用来存储程序中的数据。理解这些概念是学习 C++ 编程的第一步。","title":"数据类型和变量","type":"post"},{"content":"","date":"18 January 18180","externalUrl":null,"permalink":"/tags/%E6%A0%87%E7%AD%BE1/","section":"Tags","summary":"","title":"标签1","type":"tags"},{"content":"","date":"18 January 18180","externalUrl":null,"permalink":"/tags/%E6%A0%87%E7%AD%BE2/","section":"Tags","summary":"","title":"标签2","type":"tags"},{"content":"在 C++ 中，流程控制语句是程序执行过程中用于控制程序流的语句。它们决定了代码的执行顺序，通常用于判断、循环和分支。C++ 的流程控制语句主要包括以下几类：\n1. 条件语句 # 条件语句用于根据条件的真假来决定程序的执行路径。\n1.1 if 语句 # if 语句用于判断某个条件是否为真。如果条件为真，执行语句块中的代码；否则跳过该语句块。\n语法：\nif (condition) { // 条件为真时执行的代码 } 示例：\nint a = 10; if (a \u0026gt; 5) { cout \u0026lt;\u0026lt; \u0026#34;a 大于 5\u0026#34; \u0026lt;\u0026lt; endl; } 1.2 if-else 语句 # if-else 语句在 if 条件为假时提供了另一条执行路径。\n语法：\nif (condition) { // 条件为真时执行的代码 } else { // 条件为假时执行的代码 } 示例：\nint a = 10; if (a \u0026gt; 5) { cout \u0026lt;\u0026lt; \u0026#34;a 大于 5\u0026#34; \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; \u0026#34;a 小于等于 5\u0026#34; \u0026lt;\u0026lt; endl; } 1.3 if-else if-else 语句 # 当有多个条件需要判断时，可以使用 else if 来检查多个条件。\n语法：\nif (condition1) { // 条件1为真时执行 } else if (condition2) { // 条件2为真时执行 } else { // 条件1和条件2都为假时执行 } 示例：\nint a = 10; if (a \u0026gt; 10) { cout \u0026lt;\u0026lt; \u0026#34;a 大于 10\u0026#34; \u0026lt;\u0026lt; endl; } else if (a == 10) { cout \u0026lt;\u0026lt; \u0026#34;a 等于 10\u0026#34; \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; \u0026#34;a 小于 10\u0026#34; \u0026lt;\u0026lt; endl; } 1.4 switch 语句 # switch 语句根据不同的常量值来决定执行路径。它常用于处理多个可能的条件，适合用于处理相等判断。\n语法：\nswitch (expression) { case value1: // 如果 expression == value1 执行此代码 break; case value2: // 如果 expression == value2 执行此代码 break; default: // 如果 expression 不等于任何 case，执行此代码 break; } 示例：\nint a = 2; switch (a) { case 1: cout \u0026lt;\u0026lt; \u0026#34;a 等于 1\u0026#34; \u0026lt;\u0026lt; endl; break; case 2: cout \u0026lt;\u0026lt; \u0026#34;a 等于 2\u0026#34; \u0026lt;\u0026lt; endl; break; case 3: cout \u0026lt;\u0026lt; \u0026#34;a 等于 3\u0026#34; \u0026lt;\u0026lt; endl; break; default: cout \u0026lt;\u0026lt; \u0026#34;a 不等于 1、2、3\u0026#34; \u0026lt;\u0026lt; endl; break; } 注意：\nswitch 语句只能用于判断常量值，不能用表达式或区间。 每个 case 后面一般跟着 break 语句，防止程序继续执行后面的代码。 2. 循环语句 # 循环语句用于重复执行某段代码，直到满足指定的条件为止。\n2.1 for 循环 # for 循环用于在已知循环次数的情况下重复执行一段代码。\n语法：\nfor (initialization; condition; increment/decrement) { // 循环体 } initialization：初始化部分，通常用于定义和初始化循环变量。 condition：循环条件，若为真，则继续执行循环体。 increment/decrement：循环变量的增减操作。 示例：\nfor (int i = 0; i \u0026lt; 5; i++) { cout \u0026lt;\u0026lt; \u0026#34;i = \u0026#34; \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; } 2.2 while 循环 # while 循环用于在条件为真时重复执行一段代码。适用于在开始循环前无法确定循环次数的情况。\n语法：\nwhile (condition) { // 循环体 } 示例：\nint i = 0; while (i \u0026lt; 5) { cout \u0026lt;\u0026lt; \u0026#34;i = \u0026#34; \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; i++; } 2.3 do-while 循环 # do-while 循环与 while 循环类似，但不同之处在于 do-while 循环至少会执行一次循环体，因为循环条件在循环体之后判断。\n语法：\ndo { // 循环体 } while (condition); 示例：\nint i = 0; do { cout \u0026lt;\u0026lt; \u0026#34;i = \u0026#34; \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; i++; } while (i \u0026lt; 5); 3. 跳转语句 # 跳转语句用于改变程序的执行流。\n3.1 break 语句 # break 语句用于退出当前的循环或 switch 语句，程序继续执行后面的代码。\n示例：\nfor (int i = 0; i \u0026lt; 10; i++) { if (i == 5) { break; // 当 i 等于 5 时，跳出循环 } cout \u0026lt;\u0026lt; \u0026#34;i = \u0026#34; \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; } 3.2 continue 语句 # continue 语句用于跳过当前循环中的剩余部分，直接开始下一次循环。\n示例：\nfor (int i = 0; i \u0026lt; 5; i++) { if (i == 2) { continue; // 当 i 等于 2 时，跳过本次循环 } cout \u0026lt;\u0026lt; \u0026#34;i = \u0026#34; \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; } 3.3 goto 语句 # goto 语句用于跳转到程序中的其他位置。由于它可能导致程序结构不清晰，通常不推荐使用。\n语法：\ngoto label; ... label: // 跳转到该位置 示例：\nint i = 0; loop_start: if (i \u0026lt; 5) { cout \u0026lt;\u0026lt; \u0026#34;i = \u0026#34; \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; i++; goto loop_start; } 4. 常见组合语句 # 4.1 嵌套语句 # C++ 允许在一个语句内部嵌套使用其他语句。例如，if 语句可以嵌套在 for 循环内部。\n示例：\nfor (int i = 0; i \u0026lt; 5; i++) { if (i == 3) { cout \u0026lt;\u0026lt; \u0026#34;i 等于 3\u0026#34; \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; \u0026#34;i 不等于 3\u0026#34; \u0026lt;\u0026lt; endl; } } 4.2 多重条件判断与循环 # 可以组合多重 if-else 和 switch 语句来判断多种情况。\n示例：\nint x = 10, y = 20; if (x \u0026gt; y) { cout \u0026lt;\u0026lt; \u0026#34;x 大于 y\u0026#34; \u0026lt;\u0026lt; endl; } else if (x \u0026lt; y) { cout \u0026lt;\u0026lt; \u0026#34;x 小于 y\u0026#34; \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; \u0026#34;x 等于 y\u0026#34; \u0026lt;\u0026lt; endl; } switch (x) { case 10: cout \u0026lt;\u0026lt; \u0026#34;x 等于 10\u0026#34; \u0026lt;\u0026lt; endl; break; default: cout \u0026lt;\u0026lt; \u0026#34;其他情况\u0026#34; \u0026lt;\u0026lt; endl; } 4.3 应用案例 # 1. 判断质数的程序 # 质数是大于 1 且只能被 1 和它自身整除的自然数。例如，2、3、5、7、11 等都是质数。判断一个数是否是质数可以通过检查它是否能被小于它的数整除。\n#include \u0026lt;iostream\u0026gt; using namespace std; bool isPrime(int n) { // 处理边界情况：1 不是质数，负数也不是质数 if (n \u0026lt;= 1) { return false; } // 判断是否能被 2 到 sqrt(n) 之间的数整除 for (int i = 2; i * i \u0026lt;= n; i++) { if (n % i == 0) { return false; // 如果能整除，说明不是质数 } } return true; // 通过所有检查后，说明是质数 } int main() { int number; cout \u0026lt;\u0026lt; \u0026#34;请输入一个整数: \u0026#34;; cin \u0026gt;\u0026gt; number; if (isPrime(number)) { cout \u0026lt;\u0026lt; number \u0026lt;\u0026lt; \u0026#34; 是质数\u0026#34; \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; number \u0026lt;\u0026lt; \u0026#34; 不是质数\u0026#34; \u0026lt;\u0026lt; endl; } return 0; } 代码解析： # isPrime() 函数用于判断一个数是否为质数。它通过遍历从 2 到 sqrt(n) 的所有整数，检查是否能整除 n。 main() 函数从用户那里获取一个整数，并调用 isPrime() 函数判断该数是否是质数。 2. 绘制数字金字塔 # 从最上面是 1 到最下面是 9，每一层的数字逐渐增大，形状对称且居中。\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int height = 9; // 金字塔的高度 // 外循环控制每一行 for (int i = 1; i \u0026lt;= height; i++) { // 打印每行的前导空格，用于居中对齐 for (int j = 1; j \u0026lt;= height - i; j++) { cout \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } // 打印递增的数字（从 1 打到当前行号） for (int j = 1; j \u0026lt;= i; j++) { cout \u0026lt;\u0026lt; i; // 这里打印当前行号 i } // 打印递减的数字（从当前行号 - 1 打回 1） for (int j = 1; j \u0026lt; i; j++) { cout \u0026lt;\u0026lt; i; // 这里也打印当前行号 i } // 换行 cout \u0026lt;\u0026lt; endl; } return 0; } 代码解析： # 前导空格：用来确保数字是居中的，for (int j = 1; j \u0026lt;= height - i; j++) 用于打印每一行的空格。 递增的数字：for (int j = 1; j \u0026lt;= i; j++) 打印从 i 行号开始的数字（打印 i 次）。 递减的数字：for (int j = 1; j \u0026lt; i; j++) 再打印 i-1 次数字，使得两边对称。 换行：每打印完一行后，使用 cout \u0026lt;\u0026lt; endl; 进行换行。 ","date":"18 January 18180","externalUrl":null,"permalink":"/post/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/","section":"Posts","summary":"在 C++ 中，流程控制语句是程序执行过程中用于控制程序流的语句。它们决定了代码的执行顺序，通常用于判断、循环和分支。C++ 的流程控制语句主要包括以下几类：","title":"流程控制","type":"post"},{"content":"写C++程序其实很简单，直接用记事本写好代码，然后用一个编译器做编译运行就可以了；不过这意味这我们得自己保证语法正确，严重影响开发效率。所以实际应用中我们一般都会使用功能更强大的工具，除了提供编译器外，还可以给我们做语法检查和提醒，方便我们调试程序——这就是所谓的“集成开发环境”（IDE）。\n这里我们使用ubuntu系统来演示，首先我们需要一个ide来编辑代码，这里我们选择 vscode,安装好软件后就可以写代码了\n在 Ubuntu 系统上编写 C++ 程序的基本步骤如下：\n1. 安装必要的软件 # 首先，需要确保系统已安装 C++ 编译器，最常见的是 g++。可以通过以下命令进行安装：\nsudo apt update sudo apt install g++ 2. 编写 C++ 程序 # 在 Ubuntu 中，使用文本编辑器（如 nano、vim、gedit 等）编写 C++ 程序。例如，创建一个简单的 hello.cpp 程序：\n#include \u0026lt;iostream\u0026gt; void greet(); // 函数声明 int main() { greet(); // 调用函数 return 0; } void greet() { // 函数定义 std::cout \u0026lt;\u0026lt; \u0026#34;Hello, World!\u0026#34; \u0026lt;\u0026lt; std::endl; } 3. 编译和运行程序 # 使用 g++ 编译器来编译 C++ 程序。假设文件名为 hello.cpp，在终端中运行以下命令：\ng++ hello.cpp -o hello ./hello 这将编译 hello.cpp，并生成名为 hello 的可执行文件，然后运行它。\n4. 函数链接问题 # 当多个 C++ 文件（例如 file1.cpp 和 file2.cpp）中包含不同的函数定义时，编译器需要链接这些文件。链接是将多个目标文件（.o 文件）合并为一个可执行文件的过程。C++ 支持将函数的声明放在头文件中，并在其他源文件中定义函数。\n假设有两个文件：file1.cpp 和 file2.cpp。\nfile1.cpp: # #include \u0026lt;iostream\u0026gt; void function_in_file1(); // 函数声明 int main() { function_in_file1(); return 0; } file2.cpp: # #include \u0026lt;iostream\u0026gt; void function_in_file1() { // 函数定义 std::cout \u0026lt;\u0026lt; \u0026#34;Function in file2 is called.\u0026#34; \u0026lt;\u0026lt; std::endl; } 编译和链接多个文件： # 你需要将两个文件编译并链接在一起：\ng++ file1.cpp file2.cpp -o program ./program 这样，g++ 会将 file1.cpp 和 file2.cpp 编译成目标文件，并链接它们生成最终的可执行文件。\n5. 处理链接错误 # 如果有多个函数定义冲突，编译器会报错。例如，两个文件中有相同名字的函数定义，这时链接会失败。为避免这种情况，可以使用 inline 关键字或者将函数声明放到不同的命名空间中。\n例如： # namespace file1 { void greet() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello from file1.\u0026#34; \u0026lt;\u0026lt; std::endl; } } namespace file2 { void greet() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello from file2.\u0026#34; \u0026lt;\u0026lt; std::endl; } } 这种方式可以避免同名函数的冲突。 ![[Pasted image 20250117231536.png]]\n","date":"18 January 18180","externalUrl":null,"permalink":"/post/%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8Bhello-world/","section":"Posts","summary":"写C++程序其实很简单，直接用记事本写好代码，然后用一个编译器做编译运行就可以了；不过这意味这我们得自己保证语法正确，严重影响开发效率。所以实际应用中我们一般都会使用功能更强大的工具，除了提供编译器外，还可以给我们做语法检查和提醒，方便我们调试程序——这就是所谓的“集成开发环境”（IDE）。","title":"简单上手","type":"post"},{"content":"在 C++ 中，运算符用于对数据进行操作。运算符可以对基本数据类型、变量、对象等进行计算或操作。C++ 提供了多种运算符，下面将详细讲解常用的几类运算符。\n1. 算术运算符 # 算术运算符用于进行常见的数学运算。\n运算符 描述 示例 + 加法 a + b - 减法 a - b * 乘法 a * b / 除法 a / b % 取余 a % b 除法运算符 (/)：当两个整数相除时，结果是整数部分。如果需要得到小数部分，至少一个操作数必须是浮动类型（float、double）。\nint x = 7, y = 3; cout \u0026lt;\u0026lt; x / y \u0026lt;\u0026lt; endl; // 输出 2，结果是整数 取余运算符 (%)：返回两数相除的余数，只能用于整数类型。\nint x = 7, y = 3; cout \u0026lt;\u0026lt; x % y \u0026lt;\u0026lt; endl; // 输出 1，余数 2. 关系运算符 # 关系运算符用于比较两个值，并返回一个布尔值（true 或 false）。\n运算符 描述 示例 == 等于 a == b != 不等于 a != b \u0026gt; 大于 a \u0026gt; b \u0026lt; 小于 a \u0026lt; b \u0026gt;= 大于等于 a \u0026gt;= b \u0026lt;= 小于等于 a \u0026lt;= b 例如：\nint a = 10, b = 5; cout \u0026lt;\u0026lt; (a == b) \u0026lt;\u0026lt; endl; // 输出 0 (false) cout \u0026lt;\u0026lt; (a \u0026gt; b) \u0026lt;\u0026lt; endl; // 输出 1 (true) 3. 逻辑运算符 # 逻辑运算符用于连接多个条件表达式，返回一个布尔值。\n运算符 描述 示例 \u0026amp;\u0026amp; 逻辑与（AND） a \u0026gt; 0 \u0026amp;\u0026amp; b \u0026gt; 0 ` ` ! 逻辑非（NOT） !(a \u0026gt; 0) 示例：\nint a = 10, b = 5; cout \u0026lt;\u0026lt; (a \u0026gt; 0 \u0026amp;\u0026amp; b \u0026gt; 0) \u0026lt;\u0026lt; endl; // 输出 1 (true) cout \u0026lt;\u0026lt; (a \u0026lt; 0 || b \u0026gt; 0) \u0026lt;\u0026lt; endl; // 输出 1 (true) cout \u0026lt;\u0026lt; !(a \u0026gt; 0) \u0026lt;\u0026lt; endl; // 输出 0 (false) 4. 位运算符 # 位运算符用于对整数类型的二进制位进行操作。\n运算符 描述 示例 \u0026amp; 按位与 a \u0026amp; b ` ` 按位或 ^ 按位异或 a ^ b ~ 按位取反 ~a \u0026lt;\u0026lt; 左移 a \u0026lt;\u0026lt; 2 \u0026gt;\u0026gt; 右移 a \u0026gt;\u0026gt; 2 例如：\nint a = 5, b = 3; cout \u0026lt;\u0026lt; (a \u0026amp; b) \u0026lt;\u0026lt; endl; // 输出 1（按位与） cout \u0026lt;\u0026lt; (a | b) \u0026lt;\u0026lt; endl; // 输出 7（按位或） cout \u0026lt;\u0026lt; (a ^ b) \u0026lt;\u0026lt; endl; // 输出 6（按位异或） cout \u0026lt;\u0026lt; (~a) \u0026lt;\u0026lt; endl; // 输出 -6（按位取反） cout \u0026lt;\u0026lt; (a \u0026lt;\u0026lt; 1) \u0026lt;\u0026lt; endl; // 输出 10（左移） cout \u0026lt;\u0026lt; (a \u0026gt;\u0026gt; 1) \u0026lt;\u0026lt; endl; // 输出 2（右移） 5. 赋值运算符 # 赋值运算符用于将右侧的值赋给左侧的变量。\n运算符 描述 示例 = 赋值 a = b += 加法赋值 a += b -= 减法赋值 a -= b *= 乘法赋值 a *= b /= 除法赋值 a /= b %= 取余赋值 a %= b 示例：\nint a = 10, b = 5; a += b; // a = a + b，即 a = 15 cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl; // 输出 15 a *= b; // a = a * b，即 a = 75 cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl; // 输出 75 6. 自增与自减运算符 # 自增和自减运算符用于将变量的值增加或减少 1。\n运算符 描述 示例 ++ 自增 a++ -- 自减 a-- 前置自增/自减：++a 或 --a，先自增/自减，然后再使用该值。 后置自增/自减：a++ 或 a--，先使用该值，然后再自增/自减。 示例：\nint a = 5; cout \u0026lt;\u0026lt; ++a \u0026lt;\u0026lt; endl; // 输出 6（前置自增） cout \u0026lt;\u0026lt; a++ \u0026lt;\u0026lt; endl; // 输出 6（后置自增，输出前的值） cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl; // 输出 7（a 已经增加到 7） 7. 条件运算符（三目运算符） # 条件运算符是 C++ 中唯一的三元运算符，用于简化 if-else 语句。\n语法：\ncondition ? expr1 : expr2; 如果 condition 为真，则返回 expr1，否则返回 expr2。 示例：\nint a = 10, b = 5; int max = (a \u0026gt; b) ? a : b; // 如果 a \u0026gt; b，max 为 a，否则为 b cout \u0026lt;\u0026lt; \u0026#34;The maximum value is \u0026#34; \u0026lt;\u0026lt; max \u0026lt;\u0026lt; endl; 8. 逗号运算符 # 逗号运算符用于在一条语句中执行多个操作。操作会从左到右依次进行，但整个表达式的值为最后一个操作的结果。\n语法：\nexpr1, expr2, ..., exprN 示例：\nint a = 5, b = 10; int c = (a++, b++, a + b); // a 和 b 自增，然后计算 a + b 的值 cout \u0026lt;\u0026lt; c \u0026lt;\u0026lt; endl; // 输出 16 9. 指针运算符 # 指针运算符用于访问指针的值或地址。\n运算符 描述 示例 \u0026amp; 地址运算符 \u0026amp;a * 解引用运算符 *ptr 示例：\nint a = 10; int *ptr = \u0026amp;a; // \u0026amp;a 获取 a 的地址 cout \u0026lt;\u0026lt; *ptr \u0026lt;\u0026lt; endl; // *ptr 获取 a 的值，即 10 10. 类型转换运算符 # C++ 提供了几种类型转换运算符，用于在不同类型之间转换：\n运算符 描述 static_cast 用于标准的类型转换 dynamic_cast 用于多态类型之间的转换（特别是类） const_cast 用于修改常量属性 reinterpret_cast 强制类型转换，常用于指针类型之间 示例：\ndouble pi = 3. 14159; int intPi = static_cast(pi); // 强制转换为整型 cout \u0026laquo; intPi \u0026laquo; endl; // 输出 3\n","date":"18 January 18180","externalUrl":null,"permalink":"/post/%E8%BF%90%E7%AE%97%E7%AC%A6/","section":"Posts","summary":"在 C++ 中，运算符用于对数据进行操作。运算符可以对基本数据类型、变量、对象等进行计算或操作。C++ 提供了多种运算符，下面将详细讲解常用的几类运算符。","title":"运算符","type":"post"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]